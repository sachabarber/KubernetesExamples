DOCKER

cd C:\Users\sacha\Desktop\KubernetesExamples\Post2_SimpleServiceStackPod\sswebapp
docker build -t "sswebapp/v1" .
docker run -p 5000:5000 sswebapp/v1


cd C:\Users\sacha\Desktop\KubernetesExamples\Post2_SimpleServiceStackPod\sswebapp
docker build -t "sswebapp:v1" .
docker run -p 5000:5000 sswebapp:v1




DOCKER HUB



> docker login --username=sachabarber
> cd C:\Users\sacha\Desktop\KubernetesExamples\Post2_SimpleServiceStackPod\sswebapp
> docker build -t "sswebapp:v1" .
> docker tag sswebapp:v1 sachabarber/sswebapp:v1
> docker push sachabarber/sswebapp
> docker pull sachabarber/sswebapp
> docker run -p 5000:5000 sachabarber/sswebapp:v1



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
RUN IN KUBERNETES USING DOCKER HUB
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

https://kubernetes.io/docs/tutorials/stateless-application/expose-external-ip-address/

You create your Docker image and push it to a registry before referring to it in a Kubernetes pod.

> c:\
> cd\
> minikube.exe start --kubernetes-version="v1.9.0" --vm-driver="hyperv" --memory=1024 --hyperv-virtual-switch="Minikube Switch" --v=7 --alsologtostderr 
> kubectl run simple-sswebapi-pod-v1 --replicas=1 --labels="run=sswebapi-pod-v1" --image=sachabarber/sswebapp:v1  --port=5000
> kubectl expose deployment simple-sswebapi-pod-v1 --type=NodePort --name=simple-sswebapi-service
> kubectl get services simple-sswebapi-service
> minikube service simple-sswebapi-service --url 
  to grab the URL which allows you to then hit the service in browser YAY






+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
MINIKUBE PRIVATE DOCKER REPO 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

HAVE LEFT THESE NOTES IN FOR NOW MAY NEED TO REVISIT IN LINE WITH ABOVE STUFF NAMES HAVE CHANGED


https://github.com/kubernetes/kubernetes/issues/12835
https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
https://blog.hasura.io/sharing-a-local-registry-for-minikube-37c7240d0615
https://mtpereira.com/local-development-k8s.html


> c:\
> cd\
> minikube.exe start --kubernetes-version="v1.9.0" --vm-driver="hyperv" --memory=1024 --hyperv-virtual-switch="Minikube Switch" --v=7 --alsologtostderr --insecure-registry localhost:5000
> minikube docker-env
> & minikube docker-env | Invoke-Expression
> kubectl.exe apply -f C:\Users\sacha\Desktop\KubernetesExamples\Post2_SimpleServiceStackPod\sswebapp\LocalRegistry.yaml

> In bash
> kubectl port-forward --namespace kube-system \
  $(kubectl get po -n kube-system | grep kube-registry-v0 | \
  awk '{print $1;}') 5000:5000

> cd C:\Users\sacha\Desktop\KubernetesExamples\Post2_SimpleServiceStackPod\sswebapp
> docker build -t "sswebapp:v1" .
> docker tag sacha/sswebapp:v1 localhost:5000/sacha/sswebapp:v1
> docker push localhost:5000/sacha/sswebapp:v1
> kubectl run simple-sswebapi-pod-v1 --replicas=1 --labels="run=sswebapi-pod-v1" --image=ocalhost:5000/sacha/sswebapp:v1  --port=5000
> kubectl expose deployment simple-sswebapi-pod-v1 --type=NodePort --name=simple-sswebapi-service
> kubectl get services simple-sswebapi-service
> minikube service simple-sswebapi-service --url 
  to grab the URL which allows you to then hit the service in browser YAY






USEFUL COMMANDS

- c:\minikube.exe dashboard (DASHBOARD)
- c:\kubectl describe pod fail-1036623984-hxoas
- kubectl get pods -o wide (DESCRIBE POD)
- kubectl describe pod `<podName>` | grep IP | awk '{print $2}' (GET IP ADDRESS FROM POD)
- kubectl expose deployment simplewebapipod-v1 --type="NodePort" (CREATE DEPLOYMENT WITHOUT YAML)
- kubectl get deploy deploymentname -o yaml --export (GET YAML FROM DEPLOYMENT, CAN USE THIS FOR PODs TOO)





USEFUL COMMANDS

# Delete all containers
docker rm $(docker ps -a -q)
# Delete all images
docker rmi $(docker images -q)
